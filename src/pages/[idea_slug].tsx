import { GetServerSidePropsContext, InferGetServerSidePropsType } from "next";
import { Idea, IdeaNote } from "@prisma/client";

import Head from "next/head";
import Link from "next/link";
import SubHeader from "../components/SubHeader";
import { appRouter } from "../server/trpc/router";
import { createContext } from "../server/trpc/context";
import { createProxySSGHelpers } from "@trpc/react/ssg";
import superjson from "superjson";
import { trpc } from "../utils/trpc";
import { useState } from "react";

const border_style = "rounded-md border-2 border-emerald-400";
const input_style = "py-1 px-2 text-base";

type IdeaPageProps = {
  notFound: boolean;

  idea: Idea & { ideaNotes: IdeaNote[] };
};

type PageContentPropTypes = {
  idea: Idea & { ideaNotes: IdeaNote[] };
  refetch: any;
};

const NoteCard = ({ ideaNote }: { ideaNote: IdeaNote }) => {
  return (
    <div
      key={ideaNote.id}
      className="my-4 flex h-min w-full max-w-md items-start rounded-md bg-slate-200 px-4 py-2"
    >
      {/* Center */}
      <p className="font-base w-3/4 break-words text-xl text-emerald-900">
        {ideaNote.text}{" "}
      </p>
      {/* Right */}
    </div>
  );
};

const NoteForm = ({
  ideaId,
  updateNoteList,
}: {
  ideaId: string;
  updateNoteList: () => void;
}) => {
  const commentMutation = trpc.idea.submitIdeaNote.useMutation();
  const [noteContent, setNoteContent] = useState("");

  const handleSubmitNote = (e: React.FormEvent<HTMLFormElement>) => {
    const fireCreate = () => {
      commentMutation.mutateAsync(
        { message: noteContent, ideaId: ideaId },
        {
          onSuccess(data) {
            updateNoteList();
          },
        }
      );
    };
    const clearCommentForm = () => {
      setNoteContent("");
    };

    e.preventDefault();
    fireCreate();
    clearCommentForm();
  };

  return (
    <form
      onSubmit={handleSubmitNote}
      className="fixed bottom-10 flex w-full max-w-5xl flex-col justify-end px-5 sm:px-24"
    >
      <label className="p-1 font-semibold text-emerald-500" htmlFor="">
        Note
      </label>
      <div className="flex h-full w-full">
        <input
          onChange={(e) => setNoteContent(e.target.value)}
          value={noteContent}
          type="text"
          className={`${border_style} ${input_style} flex-grow bg-slate-200/50 backdrop-blur-sm`}
        />
        <button className=" mx-2 w-14 rounded-md bg-emerald-500 p-1 text-sm font-semibold text-emerald-900 sm:w-24">
          Add Note
        </button>
      </div>
    </form>
  );
};

const PageContent = ({ idea, refetch }: PageContentPropTypes) => {
  const getPrefix = () => {
    if (idea.rating > 0) return "+";
    else if (idea.rating < 0) return "-";
    return " ";
  };
  const updateNoteList = () => {
    refetch();
  };
  const getTextColor = () => {
    if (idea.rating > 0) return "text-emerald-500";
    else if (idea.rating < 0) return "text-red-400";
    return "text-gray-400";
  };
  const NoteList = idea.ideaNotes.map((ideaNote) => (
    <NoteCard key={ideaNote.id} ideaNote={ideaNote} />
  ));
  return (
    <div className="flex min-h-full w-full flex-col items-center justify-center px-4">
      <SubHeader>{idea.title}</SubHeader>
      <p className="py-0">{idea.description}</p>
      <span className={`px-2 text-base font-medium ${getTextColor()}`}>
        Rating: {getPrefix()}
        {Math.abs(idea.rating)}
      </span>
      {NoteList}
      <NoteForm updateNoteList={updateNoteList} ideaId={idea.id} />
    </div>
  );
};

const IdeaPage = ({
  notFound,
  trpcState,
  idea_slug,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const getStateMessage = (isLoading: boolean, notFound: boolean) => {
    if (isLoading) {
      return "Loading...";
    } else if (notFound) {
      return "Page Not Found";
    } else {
      return "";
    }
  };
  const ideaQuery = trpc.idea.getIdeaBySlug.useQuery(idea_slug);
  const { data: idea, isLoading, refetch } = ideaQuery;
  return (
    <>
      <Head>
        <title>{idea_slug}</title>
        <title>{idea?.title ?? "Loading"}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen w-full flex-col items-center bg-slate-100 py-10 px-4 pb-24">
        <Link href="/">
          <h1 className="cursor-pointer py-4 text-3xl font-black text-emerald-500 sm:text-5xl">
            Blazingly Fast 497s
          </h1>
        </Link>
        {notFound || isLoading ? (
          <SubHeader>{getStateMessage(isLoading, notFound)}</SubHeader>
        ) : (
          <PageContent idea={idea!} refetch={refetch} />
        )}
      </main>
    </>
  );
};

export default IdeaPage;

export async function getServerSideProps(
  context: GetServerSidePropsContext<{ idea_slug: string }>
) {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: await createContext(),
    transformer: superjson,
  });
  const idea_slug = context.params?.idea_slug as string;
  /*
   * Prefetching the `post.byId` query here.
   * `prefetch` does not return the result and never throws - if you need that behavior, use `fetch` instead.
   */
  // await ssg.post.byId.prefetch({ id });
  await ssg.idea.getIdeaBySlug.prefetch(idea_slug);
  // Make sure to return { props: { trpcState: ssg.dehydrate() } }
  console.log("slug: ", idea_slug);
  return {
    props: {
      trpcState: ssg.dehydrate(),
      idea_slug,
      notFound: false,
    },
  };
}

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   const serializeDate = (obj: Idea | IdeaNote) => {
//     obj.createdAt = JSON.parse(JSON.stringify(obj.createdAt));
//   };

//   const slug = context.params?.idea_slug;

//   if (!slug || !(typeof slug === "string")) {
//     return {
//       props: {
//         notFound: true,
//       }, // will be passed to the page component as props
//     };
//   }
//   // slug = slug as string;
//   const idea = await prisma.idea.findUnique({
//     where: {
//       slug,
//     },
//     include: {
//       ideaNotes: {
//         orderBy: { createdAt: "desc" },
//       },
//     },
//   });

//   if (!idea) {
//     return {
//       props: {
//         notFound: true,
//       }, // will be passed to the page component as props
//     };
//   }

//   serializeDate(idea);
//   idea.ideaNotes.forEach(serializeDate);

//   return {
//     props: { idea }, // will be passed to the page component as props
//   };
// };
